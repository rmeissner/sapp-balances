{"version":3,"sources":["utils/sdk.tsx","logic/tokenRepository.ts","dialogs/SendTokenDialog.tsx","dialogs/AddTokenDialog.tsx","dialogs/RemoveTokenDialog.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SDKContext","React","createContext","SDK","useSdk","useContext","erc20Interface","Contract","getInterface","TOKEN_CACHE_PREFIX","TRACKED_TOKENS","ETH_INFO","address","symbol","decimals","loadTokenInfo","eth","a","cleanAddress","utils","getAddress","storageString","localStorage","getItem","token","JSON","parse","e","removeItem","callErc20Method","setItem","stringify","loadTokenBalance","account","cleanAccount","getBalance","ethBalance","method","params","call","to","data","encodeFunctionData","result","decodeFunctionResult","writeTrackedTokens","trackedTokens","loadTrackedTokens","trackedTokensStorage","trackToken","untrackToken","encodeTransfer","tokenAddress","receiver","amount","value","toHexString","styles","createStyles","remove","margin","item","flex","withStyles","open","onClose","sdk","undefined","tokenInfo","setTokenInfo","setReceiver","setAmount","handleClose","sendToken","formattedAmount","parseUnits","transferTx","txs","send","console","error","init","Dialog","scroll","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","dividers","DialogContentText","tabIndex","TextField","label","onChange","target","DialogActions","Button","onClick","color","setTokenAddress","addToken","removeToken","slice","list","content","itemText","textAlign","TokenImage","useState","errored","setErrored","url","width","height","src","onError","classes","showAddToken","setShowAddToken","manageTokens","setManageTokens","transferToken","setTransferToken","setRemoveToken","balances","setBalances","loadBalances","useCallback","Promise","all","Object","entries","map","tokensInfo","safe","getInfo","accountInfo","info","log","safeAddress","balance","formatUnits","useEffect","timeout","scheduleUpdate","setTimeout","clearTimeout","List","b","ListItem","button","ListItemIcon","style","padding","Delete","ListItemText","className","primary","length","CircularProgress","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","theme","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c1d36d6f.chunk.js","sourcesContent":["import React from 'react'\nimport SDK from '@gnosis.pm/safe-apps-sdk'\n\nconst SDKContext = React.createContext<SDK>(new SDK())\nexport const useSdk = () => React.useContext(SDKContext)","import { BaseTransaction } from \"@gnosis.pm/safe-apps-sdk\";\nimport { Eth } from \"@gnosis.pm/safe-apps-sdk/dist/src/eth\"\nimport { utils, Contract, BigNumber } from \"ethers\"\n\nconst erc20Abi = [\n    // Some details about the token\n    \"function name() view returns (string)\",\n    \"function symbol() view returns (string)\",\n    \"function decimals() view returns (uint256)\",\n\n    // Get the account balance\n    \"function balanceOf(address) view returns (uint)\",\n\n    // Send some of your tokens to someone else\n    \"function transfer(address to, uint amount)\"\n];\n\nconst erc20Interface = Contract.getInterface(erc20Abi);\n\nconst TOKEN_CACHE_PREFIX = \"sapp_balances_token_repo.token_cache.\"\nconst TRACKED_TOKENS = \"sapp_balances_token_repo.tracked_tokens\"\n\nexport const ETH_INFO: Token = {\n    address: \"\",\n    symbol: \"ETH\",\n    decimals: 18\n}\n\nexport interface Balance {\n    token: Token,\n    balance?: string\n}\n\nexport interface Token {\n    address: string,\n    decimals: number,\n    symbol: string\n}\n\nexport const loadTokenInfo = async (eth: Eth, address: string): Promise<Token> => {\n    if (address === \"\") return ETH_INFO\n    const cleanAddress = utils.getAddress(address)\n    const storageString = localStorage.getItem(TOKEN_CACHE_PREFIX + cleanAddress)\n    let token: Token | undefined;\n    if (storageString) {\n        try {\n            token = JSON.parse(storageString)\n        } catch (e) {\n            localStorage.removeItem(TOKEN_CACHE_PREFIX + cleanAddress)\n        }\n    }\n    if (!token) {\n        const symbol = (await callErc20Method(eth, cleanAddress, \"symbol\"))[0]\n        const decimals = (await callErc20Method(eth, cleanAddress, \"decimals\"))[0]\n        token = {\n            address: cleanAddress,\n            symbol,\n            decimals\n        }\n    }\n    localStorage.setItem(TOKEN_CACHE_PREFIX + cleanAddress, JSON.stringify(token))\n    return token\n}\n\nexport const loadTokenBalance = async (eth: Eth, address: string, account: string): Promise<string> => {\n    const cleanAccount = utils.getAddress(account)\n    if (address === \"\") {\n        const ethBalance = await eth.getBalance([account])\n        return ethBalance\n    }\n    const cleanAddress = utils.getAddress(address)\n    return (await callErc20Method(eth, cleanAddress, \"balanceOf\", [cleanAccount]))[0]\n}\n\nconst callErc20Method = async (eth: Eth, address: string, method: string, params?: any[]): Promise<utils.Result> => {\n    const result = await eth.call([{\n        to: address,\n        data: erc20Interface.encodeFunctionData(method, params)\n    }])\n    return erc20Interface.decodeFunctionResult(method, result)\n}\n\nconst writeTrackedTokens = async (trackedTokens: Record<string, string>) => {\n    localStorage.setItem(TRACKED_TOKENS, JSON.stringify(trackedTokens))\n}\n\nexport const loadTrackedTokens = async (): Promise<Record<string, string>> => {\n    const trackedTokensStorage = localStorage.getItem(TRACKED_TOKENS)\n    let trackedTokens = { \"\": \"\" }\n    if (trackedTokensStorage) {\n        try {\n            trackedTokens = JSON.parse(trackedTokensStorage)\n        } catch (e) {\n            localStorage.removeItem(TRACKED_TOKENS)\n        }\n    }\n    return trackedTokens\n}\n\nexport const trackToken = async (address: string) => {\n    const trackedTokens = await loadTrackedTokens()\n    const cleanAddress = utils.getAddress(address)\n    if (cleanAddress in trackedTokens) return\n    trackedTokens[cleanAddress] = \"\"\n    writeTrackedTokens(trackedTokens)\n}\n\nexport const untrackToken = async (address: string) => {\n    const trackedTokens = await loadTrackedTokens()\n    const cleanAddress = utils.getAddress(address)\n    if (!(cleanAddress in trackedTokens)) return\n    delete trackedTokens[cleanAddress]\n    writeTrackedTokens(trackedTokens)\n}\n\nexport const encodeTransfer = async (tokenAddress: string, receiver: string, amount: BigNumber): Promise<BaseTransaction> => {\n    if (tokenAddress === \"\") return {\n        to: receiver,\n        value: amount.toHexString(),\n        data: \"0x\"\n    }\n    return {\n        to: tokenAddress,\n        value: \"0\",\n        data: erc20Interface.encodeFunctionData(\"transfer\", [receiver, amount])\n    }\n}","import * as React from 'react'\nimport { Button, createStyles, WithStyles, withStyles, TextField, Dialog, DialogContent, DialogTitle, DialogContentText, DialogActions } from '@material-ui/core'\nimport { utils } from 'ethers'\nimport { useSdk } from '../utils/sdk'\nimport { loadTokenInfo, Token, encodeTransfer } from '../logic/tokenRepository'\n\nconst styles = createStyles({\n    remove: {\n        margin: '16px'\n    },\n    item: {\n        flex: 1\n    }\n})\n\ninterface Props extends WithStyles<typeof styles> {\n    open: boolean,\n    tokenAddress: string,\n    onClose: () => void\n}\n\nconst SendTokenDialog: React.FC<Props> = ({ open, tokenAddress, onClose }) => {\n    const sdk = useSdk()\n    const [tokenInfo, setTokenInfo] = React.useState<Token | undefined>(undefined)\n    const [receiver, setReceiver] = React.useState(\"\")\n    const [amount, setAmount] = React.useState(\"\")\n    const handleClose = React.useCallback(() => {\n        setTokenInfo(undefined)\n        setReceiver(\"\")\n        setAmount(\"\")\n        onClose()\n    }, [onClose, setReceiver, setTokenInfo, setAmount])\n    const sendToken = React.useCallback(async () => {\n        if (!tokenInfo) return;\n        try {\n            const formattedAmount = utils.parseUnits(amount, tokenInfo.decimals)\n            const transferTx = await encodeTransfer(tokenInfo.address, utils.getAddress(receiver), formattedAmount)\n            await sdk.txs.send({ txs: [transferTx]})\n            handleClose()\n        } catch (e) {\n            console.error(e)\n        }\n    }, [sdk, receiver, tokenInfo, amount, handleClose])\n    React.useEffect(() => {\n        const init = async() => {\n            setTokenInfo(await loadTokenInfo(sdk.eth, tokenAddress))\n        }\n        init()\n    }, [tokenAddress])\n    return (\n        <Dialog\n            open={open}\n            onClose={handleClose}\n            scroll=\"paper\"\n            aria-labelledby=\"scroll-dialog-title\"\n            aria-describedby=\"scroll-dialog-description\">\n            <DialogTitle id=\"scroll-dialog-title\">Send {tokenInfo?.symbol || \"\"}</DialogTitle>\n            <DialogContent dividers={true}>\n                <DialogContentText\n                    id=\"scroll-dialog-description\"\n                    tabIndex={-1}\n                >\n                    <TextField\n                        label=\"Receiver\"\n                        onChange={(e) => {\n                            setReceiver(e.target.value)\n                        }}>\n                        {tokenAddress}\n                    </TextField>\n                    <br />\n                    <TextField\n                        label=\"Amount\"\n                        onChange={(e) => {\n                            setAmount(e.target.value)\n                        }}>\n                        {tokenAddress}\n                    </TextField>\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleClose} color=\"default\">\n                    Cancel\n                </Button>\n                <Button onClick={sendToken} color=\"primary\">\n                    Send\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default withStyles(styles)(SendTokenDialog)","import * as React from 'react'\nimport { Button, createStyles, WithStyles, withStyles, TextField, Dialog, DialogContent, DialogTitle, DialogContentText, DialogActions } from '@material-ui/core'\nimport { useSdk } from '../utils/sdk'\nimport { loadTokenInfo, trackToken } from '../logic/tokenRepository'\n\nconst styles = createStyles({\n    remove: {\n        margin: '16px'\n    },\n    item: {\n        flex: 1\n    }\n})\n\ninterface Props extends WithStyles<typeof styles> {\n    open: boolean,\n    onClose: () => void\n}\n\nconst AddTokenDialog: React.FC<Props> = ({ open, onClose }) => {\n    const sdk = useSdk()\n    const [tokenAddress, setTokenAddress] = React.useState(\"\")\n    const handleClose = React.useCallback(() => {\n        setTokenAddress(\"\")\n        onClose()\n    }, [onClose, setTokenAddress])\n    const addToken = React.useCallback(async () => {\n        try {\n            await loadTokenInfo(sdk.eth, tokenAddress)\n            await trackToken(tokenAddress)\n            handleClose()\n        } catch (e) {\n            console.error(e)\n        }\n    }, [sdk, tokenAddress, setTokenAddress, handleClose])\n    return (\n        <Dialog\n            open={open}\n            onClose={handleClose}\n            scroll=\"paper\"\n            aria-labelledby=\"scroll-dialog-title\"\n            aria-describedby=\"scroll-dialog-description\">\n            <DialogTitle id=\"scroll-dialog-title\">Add a Token</DialogTitle>\n            <DialogContent dividers={true}>\n                <DialogContentText\n                    id=\"scroll-dialog-description\"\n                    tabIndex={-1}\n                >\n                    <TextField\n                        label=\"Token address\"\n                        onChange={(e) => {\n                            setTokenAddress(e.target.value)\n                        }}>\n                        {tokenAddress}\n                    </TextField>\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleClose} color=\"default\">\n                    Cancel\n                </Button>\n                <Button onClick={addToken} color=\"primary\">\n                    Add\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default withStyles(styles)(AddTokenDialog)","import * as React from 'react'\nimport { Button, createStyles, WithStyles, withStyles, TextField, Dialog, DialogContent, DialogTitle, DialogContentText, DialogActions, Typography } from '@material-ui/core'\nimport { utils } from 'ethers'\nimport { useSdk } from '../utils/sdk'\nimport { loadTokenInfo, Token, encodeTransfer, untrackToken } from '../logic/tokenRepository'\n\nconst styles = createStyles({\n    remove: {\n        margin: '16px'\n    },\n    item: {\n        flex: 1\n    }\n})\n\ninterface Props extends WithStyles<typeof styles> {\n    token: Token | undefined,\n    onClose: () => void\n}\n\nconst RemoveTokenDialog: React.FC<Props> = ({ token, onClose }) => {\n    const sdk = useSdk()\n    const removeToken = React.useCallback(async () => {\n        if (!token) return;\n        try {\n            await untrackToken(token.address)\n            onClose()\n        } catch (e) {\n            console.error(e)\n        }\n    }, [sdk, token, onClose])\n    return (\n        <Dialog\n            open={!!token?.address}\n            onClose={onClose}\n            scroll=\"paper\"\n            aria-labelledby=\"scroll-dialog-title\"\n            aria-describedby=\"scroll-dialog-description\">\n            <DialogTitle id=\"scroll-dialog-title\">Send {token?.symbol || \"\"}</DialogTitle>\n            <DialogContent dividers={true}>\n                <DialogContentText\n                    id=\"scroll-dialog-description\"\n                    tabIndex={-1}\n                >\n                    Are you sure that you want to remove {token?.symbol}<br />\n                    <br />\n                    <b>Address:</b><br />{token?.address.slice(0, 21)}<br />{token?.address.slice(21)}\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose} color=\"default\">\n                    Cancel\n                </Button>\n                <Button onClick={removeToken} color=\"primary\">\n                    Remove\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default withStyles(styles)(RemoveTokenDialog)","import React, { useCallback, useState } from 'react';\nimport './App.css';\nimport { utils } from 'ethers'\nimport { createStyles, withStyles, WithStyles, Button, CircularProgress, List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\nimport { Delete } from '@material-ui/icons';\nimport { useSdk } from './utils/sdk';\nimport { loadTrackedTokens, loadTokenInfo, loadTokenBalance, Balance, Token } from './logic/tokenRepository';\nimport SendTokenDialog from './dialogs/SendTokenDialog';\nimport AddTokenDialog from './dialogs/AddTokenDialog';\nimport RemoveTokenDialog from './dialogs/RemoveTokenDialog';\n\nconst styles = createStyles({\n  list: {\n  },\n  content: {\n  },\n  itemText: {\n    textAlign: 'end'\n  }\n})\n\nconst TokenImage: React.FC<{ tokenAddress: string }> = ({ tokenAddress }) => {\n  const [errored, setErrored] = useState(false)\n  const url = `https://gnosis-safe-token-logos.s3.amazonaws.com/${tokenAddress}.png`\n  return errored ? <></> : <img width={40} height={40} src={url} onError={() => setErrored(true)} />\n}\n\nconst App: React.FC<WithStyles<typeof styles>> = ({ classes }) => {\n  const sdk = useSdk()\n  const [showAddToken, setShowAddToken] = useState<boolean>(false)\n  const [manageTokens, setManageTokens] = useState<boolean>(false)\n  const [transferToken, setTransferToken] = useState<Token | undefined>(undefined)\n  const [removeToken, setRemoveToken] = useState<Token | undefined>(undefined)\n  const [balances, setBalances] = useState<Balance[]>([])\n  const loadBalances = React.useCallback(async () => {\n    try {\n      const trackedTokens = await loadTrackedTokens()\n      const tokensInfo: Balance[] = await Promise.all(Object.entries(trackedTokens).map(async ([address]) => {\n        return {\n          token: await loadTokenInfo(sdk.eth, address)\n        }\n      }))\n      const accountInfo = await sdk.safe.getInfo()\n      const balances = await Promise.all(tokensInfo.map(async (info) => {\n        try {\n          console.log(info.token.address, accountInfo.safeAddress)\n          const balance = await loadTokenBalance(sdk.eth, info.token.address, accountInfo.safeAddress)\n          info.balance = utils.formatUnits(balance, info.token.decimals)\n        } catch (e) {\n          console.error(e)\n        }\n        return info\n      }))\n      setBalances(balances)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [sdk])\n  React.useEffect(() => {\n    let timeout: number | undefined = undefined\n    const scheduleUpdate = async () => {\n      await loadBalances()\n      timeout = setTimeout(scheduleUpdate, 10000);\n    }\n    scheduleUpdate()\n    return () => {\n      if (timeout) clearTimeout(timeout)\n    }\n  }, [loadBalances])\n  return <>\n    <List>\n      {balances.map((b) => (\n        <ListItem button={!(manageTokens && !b.token.address) as any} onClick={() => manageTokens ? setRemoveToken(b.token) : setTransferToken(b.token)}>\n          {!manageTokens && (\n            <ListItemIcon>\n              <TokenImage tokenAddress={b.token.address} />\n            </ListItemIcon>\n          )}\n          {manageTokens && !!b.token.address && (\n            <ListItemIcon style={{ width: 24, height: 24, padding: 8 }}>\n              <Delete />\n            </ListItemIcon>\n          )}\n          <ListItemText className={classes.itemText} primary={`${b.balance || \"0\"} ${b.token.symbol}`} />\n        </ListItem>\n      ))}\n      {balances.length === 0 && (\n        <ListItem><CircularProgress /></ListItem>\n      )}\n      {manageTokens && (<>\n        <ListItem><Button onClick={() => setShowAddToken(true)}>Add Token</Button></ListItem>\n        <ListItem><Button onClick={() => setManageTokens(false)}>Done</Button></ListItem>\n      </>)}\n      {!manageTokens && (\n        <ListItem><Button onClick={() => setManageTokens(true)}>Manage Tokens</Button></ListItem>\n      )}\n    </List>\n    <AddTokenDialog open={showAddToken} onClose={() => {\n      setShowAddToken(false)\n      loadBalances()\n      setManageTokens(false)\n    }} />\n    <SendTokenDialog open={!!transferToken} tokenAddress={transferToken?.address || \"\"} onClose={() => setTransferToken(undefined)} />\n    <RemoveTokenDialog token={removeToken} onClose={() => {\n      setRemoveToken(undefined)\n      loadBalances()\n      setManageTokens(false)\n    }} />\n  </>\n}\n\nexport default withStyles(styles)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ThemeProvider } from 'styled-components';\nimport { theme } from '@gnosis.pm/safe-react-components';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}